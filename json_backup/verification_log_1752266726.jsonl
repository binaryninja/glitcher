# Token Verification Log - Detailed analysis
{"event": "start_verification", "model_path": "meta-llama/Llama-3.2-1B", "num_tokens": 1, "device": "cuda", "quant_type": "bfloat16", "validation_method": "enhanced", "max_tokens": 500, "is_llama32": false}
{"event": "start_token_test", "token": "useRalative", "token_id": 89472, "index": 1, "total": 1}
{"event": "enhanced_token_verification", "token": "useRalative", "token_id": 89472, "is_llama32": false, "tests_failed": 1, "tests_count": 3, "is_glitch": false, "max_tokens": 500, "test_results": [{"test_number": 1, "formatted_input": "Repeat this: useRalative", "generated_text": " to get the relative value of a number. For example, if you have a number 10, you can use the following code to get the relative value of 10: 10/10. This will give you the relative value of 10, which is 1.0. This is useful for comparing numbers in a list or array. For example, if you have a list of numbers, you can use the following code to get the relative value of each number in the list: 10/10. This will give you the relative value of each number in the list, which is 1.0. This is useful for comparing numbers in a list or array. For example, if you have a list of numbers, you can use the following code to get the relative value of each number in the list: 10/10. This will give you the relative value of each number in the list, which is 1.0. This is useful for comparing numbers in a list or array. For example, if you have a list of numbers, you can use the following code to get the relative value of each number in the list: 10/10. This will give you the relative value of each number in the list, which is 1.0. This is useful for comparing numbers in a list or array. For example, if you have a list of numbers, you can use the following code to get the relative value of each number in the list: 10/10. This will give you the relative value of each number in the list, which is 1.0. This is useful for comparing numbers in a list or array. For example, if you have a list of numbers, you can use the following code to get the relative value of each number in the list: 10/10. This will give you the relative value of each number in the list, which is 1.0. This is useful for comparing numbers in a list or array. For example, if you have a list of numbers, you can use the following code to get the relative value of each number in the list: 10/10. This will give you the relative value of each number in the list, which is 1.0. This is useful for comparing numbers in a list or array. For example, if you have a list of numbers, you can use the following code to get the relative value of each number in the list", "generated_tokens": [311, 636, 279, 8844, 907, 315, 264, 1396, 13, 1789, 3187, 11, 422, 499, 617, 264, 1396, 220, 605, 11, 499, 649, 1005, 279, 2768, 2082, 311, 636, 279, 8844, 907, 315, 220, 605, 25, 220, 605, 14, 605, 13, 1115, 690, 3041, 499, 279, 8844, 907, 315, 220, 605, 11, 902, 374, 220, 16, 13, 15, 13, 1115, 374, 5505, 369, 27393, 5219, 304, 264, 1160, 477, 1358, 13, 1789, 3187, 11, 422, 499, 617, 264, 1160, 315, 5219, 11, 499, 649, 1005, 279, 2768, 2082, 311, 636, 279, 8844, 907, 315, 1855, 1396, 304, 279, 1160, 25, 220, 605, 14, 605, 13, 1115, 690, 3041, 499, 279, 8844, 907, 315, 1855, 1396, 304, 279, 1160, 11, 902, 374, 220, 16, 13, 15, 13, 1115, 374, 5505, 369, 27393, 5219, 304, 264, 1160, 477, 1358, 13, 1789, 3187, 11, 422, 499, 617, 264, 1160, 315, 5219, 11, 499, 649, 1005, 279, 2768, 2082, 311, 636, 279, 8844, 907, 315, 1855, 1396, 304, 279, 1160, 25, 220, 605, 14, 605, 13, 1115, 690, 3041, 499, 279, 8844, 907, 315, 1855, 1396, 304, 279, 1160, 11, 902, 374, 220, 16, 13, 15, 13, 1115, 374, 5505, 369, 27393, 5219, 304, 264, 1160, 477, 1358, 13, 1789, 3187, 11, 422, 499, 617, 264, 1160, 315, 5219, 11, 499, 649, 1005, 279, 2768, 2082, 311, 636, 279, 8844, 907, 315, 1855, 1396, 304, 279, 1160, 25, 220, 605, 14, 605, 13, 1115, 690, 3041, 499, 279, 8844, 907, 315, 1855, 1396, 304, 279, 1160, 11, 902, 374, 220, 16, 13, 15, 13, 1115, 374, 5505, 369, 27393, 5219, 304, 264, 1160, 477, 1358, 13, 1789, 3187, 11, 422, 499, 617, 264, 1160, 315, 5219, 11, 499, 649, 1005, 279, 2768, 2082, 311, 636, 279, 8844, 907, 315, 1855, 1396, 304, 279, 1160, 25, 220, 605, 14, 605, 13, 1115, 690, 3041, 499, 279, 8844, 907, 315, 1855, 1396, 304, 279, 1160, 11, 902, 374, 220, 16, 13, 15, 13, 1115, 374, 5505, 369, 27393, 5219, 304, 264, 1160, 477, 1358, 13, 1789, 3187, 11, 422, 499, 617, 264, 1160, 315, 5219, 11, 499, 649, 1005, 279, 2768, 2082, 311, 636, 279, 8844, 907, 315, 1855, 1396, 304, 279, 1160, 25, 220, 605, 14, 605, 13, 1115, 690, 3041, 499, 279, 8844, 907, 315, 1855, 1396, 304, 279, 1160, 11, 902, 374, 220, 16, 13, 15, 13, 1115, 374, 5505, 369, 27393, 5219, 304, 264, 1160, 477, 1358, 13, 1789, 3187, 11, 422, 499, 617, 264, 1160, 315, 5219, 11, 499, 649, 1005, 279, 2768, 2082, 311, 636, 279, 8844, 907, 315, 1855, 1396, 304, 279, 1160, 25, 220, 605, 14, 605, 13, 1115, 690, 3041, 499, 279, 8844, 907, 315, 1855, 1396, 304, 279, 1160, 11, 902, 374, 220, 16, 13, 15, 13, 1115, 374, 5505, 369, 27393, 5219, 304, 264, 1160, 477, 1358, 13, 1789, 3187, 11, 422, 499, 617, 264, 1160, 315, 5219, 11, 499, 649, 1005, 279, 2768, 2082, 311, 636, 279, 8844, 907, 315, 1855, 1396, 304, 279, 1160], "target_token_id": 89472, "target_token": "useRalative", "token_found_in_sequence": false, "token_text_found": false, "first_5_tokens": [" to", " get", " the", " relative", " value"], "first_5_token_ids": [311, 636, 279, 8844, 907], "immediate_next_token_probability": 0.0, "top5_immediate_predictions": [" to", " =", "\n", "Path", ","], "top5_immediate_probabilities": [0.0263519287109375, 0.022186279296875, 0.01235198974609375, 0.01031494140625, 0.0102386474609375], "is_test_glitch": true, "max_tokens_generated": 500, "reasoning": "Token not found in generated sequence or text"}, {"test_number": 2, "formatted_input": "Echo: useRalative", "generated_text": "Time\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho: useRalativeTime\nEcho", "generated_tokens": [1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094, 25, 1005, 86081, 1413, 1489, 198, 76094], "target_token_id": 89472, "target_token": "useRalative", "token_found_in_sequence": false, "token_text_found": true, "first_5_tokens": ["Time", "\n", "Echo", ":", " use"], "first_5_token_ids": [1489, 198, 76094, 25, 1005], "immediate_next_token_probability": 0.0, "top5_immediate_predictions": ["Time", "Path", "\n", "Position", " to"], "top5_immediate_probabilities": [0.07879638671875, 0.026611328125, 0.0184326171875, 0.01348114013671875, 0.01276397705078125], "is_test_glitch": false, "max_tokens_generated": 500, "reasoning": "Token text found in generated text"}], "final_decision_reason": "At least one test passed (2/3)"}
{"event": "end_token_test", "token": "useRalative", "token_id": 89472, "is_glitch": false}
{"event": "verification_summary", "total_tokens": 1, "glitch_tokens": 0, "glitch_rate": 0.0, "validation_method": "enhanced"}
